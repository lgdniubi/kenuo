<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.training.modules.train.dao.TrainLessonsDao">

	<!-- 查询所有数据 -->
	<select id="findList" resultType="TrainLessons">
		SELECT
			DISTINCT
			t.lesson_id AS 'lessonId',
			c.name AS 'trainCategorys.name',
			c.category_id AS 'trainCategorys.categoryId',
			t.name,
			t.cover_pic AS 'coverPic',
			t.introduce,
			t.status,
			t.lesson_type AS 'lessontype',
			t.lesson_score AS 'lessonScore',
			T.CREATETIME,
			t.sort,
			t.is_show AS isShow
		FROM
			train_categorys c,
			train_lessons t
		<!-- 数据范围过滤 -->
		${sqlMap.dsf}	
			AND t.category_id = c.category_id
		<if test="beginDate != null and beginDate != ''">
			AND t.createtime >= #{beginDate}
		</if>
		<if test="endDate != null and endDate != ''">
			AND t.createtime <![CDATA[ <= ]]> #{endDate}
		</if>
		<if test="name != null and name != ''">
			AND t.name LIKE
			<if test="dbName == 'oracle'">'%'||#{name}||'%'</if>
			<if test="dbName == 'mysql'">CONCAT('%', #{name}, '%')</if>
		</if>
		<if test="categoryId != null and categoryId !='' and categoryId !='-1'">
			AND t.category_id = #{categoryId}
		</if>
		<if test="parentId !='-1' and categoryId =='-1'">
			AND t.category_id IN (SELECT category_id FROM train_categorys WHERE parent_id = #{parentId})
		</if>
			AND T.STATUS != -1
		ORDER BY t.sort DESC,T.CREATETIME DESC
	</select>

	<!-- 查询单个信息 --><!-- cuoqu -->
	<select id="get" resultType="TrainLessons">
		SELECT
			t.lesson_id AS 'lessonId',
			c.category_id AS 'categoryId',
			c.parent_id AS 'parentId',
			t.name,
			t.cover_pic AS 'coverPic',
			t.introduce,
			t.status,
			t.lesson_type AS 'lessontype',
			t.lesson_score AS 'lessonScore',
			t.sort,
			t.is_show AS isShow
		FROM
			train_categorys c,
			train_lessons t
		WHERE t.category_id = c.category_id
			AND t.lesson_id = #{lessonId}
			AND t.status != -1
	</select>
	
	<!-- 删除操作，修改表Struts的状态 （ 1 已完成，-1 未完成，0 正在学习） -->
	<update id="deleteCourseForUpdate">
		UPDATE 
		  train_lessons t 
		SET
		  t.status = '-1' 
		WHERE t.lesson_id = '${lessonId}'
	</update>
	
	<!-- 保存课程 -->
	<insert id="insert">
		INSERT INTO train_lessons (
			LESSON_ID,
			CATEGORY_ID,
			NAME,
			COVER_PIC,
			INTRODUCE,
			OFFICE_CODE,
			CREATEUSER,
			CREATETIME,
			STATUS,
			LESSON_TYPE,
			LESSON_SCORE,
			office_id,
			sort,
			is_show
		)
		VALUES
		(
			#{lessonId},
			#{trainCategorys.categoryId},
			#{name},
			#{coverPic},
			#{introduce},
			#{officeCode},
			#{createuser},
			SYSDATE(),
			#{status},
			#{lessontype},
			#{lessonScore},
			(SELECT office_id FROM trains.train_categorys WHERE category_id = #{trainCategorys.categoryId}),
			#{sort},
			#{isShow}
		)
	</insert>
	
	<!-- 修改课程 -->
	<update id="update">
		UPDATE 
		  train_lessons 
		SET
		  category_id = #{categoryId},
		  name = #{name},
		  cover_pic = #{coverPic},
		  introduce = #{introduce},
		  lesson_type = #{lessontype},
		  lesson_score = #{lessonScore},
		  office_id = (SELECT office_id FROM trains.train_categorys WHERE category_id = #{categoryId}),
		  sort = #{sort},
		  is_show = #{isShow}
		WHERE lesson_id = #{lessonId} 
	</update>
	<!-- 修改课程状态 -->
	<update id="updateIsShow">
		UPDATE 
		  train_lessons 
		SET
		  is_show = #{isShow}
		WHERE lesson_id = #{lessonId} 
	</update>
	<!-- 课程统计总揽 -->
	<select id="totalExport" resultType="StatisticsTotalExport">
		SELECT 
			u.id AS 'userId',
			u.name AS "userName",
			u.mobile AS "mobile",
			(SELECT label FROM sys_dict WHERE value=u.user_type AND type = 'sys_user_type') AS 'position',
			DATE_FORMAT(u.create_date,"%Y-%m-%d %T") AS "createTime",
			(
			CASE
			 WHEN LENGTH(o.parent_ids) = 111 THEN o.name
			 ELSE ''
			END
			) AS shopName,
			(
			CASE
				WHEN LENGTH(o.parent_ids) = 111 THEN (SELECT name FROM sys_office WHERE id = SUBSTRING(o.parent_ids FROM 79 FOR 32))
				WHEN LENGTH(o.parent_ids) = 78 THEN o.name
			  ELSE ''
			END
			) AS market,
			(
			CASE
			  WHEN LENGTH(o.parent_ids) >= 45 THEN  (SELECT name FROM sys_office WHERE id = SUBSTRING(o.parent_ids FROM 13 FOR 32))
				ELSE ''
			END
			) AS area,
			(SELECT COUNT(1) FROM train_lesson_favorites WHERE user_id = u.id) AS 'collection',
			u.totle_score AS 'totleScore',
			(SELECT COUNT(1) FROM train_lesson_comments WHERE user_id = u.id) AS 'comment',
			(SELECT SUM(star) FROM train_lesson_comments WHERE user_id = u.id) AS 'commentScore'
		FROM sys_user u
		LEFT JOIN sys_office o ON u.office_id = o.id
		WHERE u.del_flag=0
	</select>
	<!-- 收藏统计 -->
	<select id="collectionExport" resultType="StatisticsCollectionExport">
		SELECT
			u.id AS 'userId',
			u.name AS "userName",
			u.mobile AS "mobile",
			(SELECT label FROM sys_dict WHERE value=u.user_type AND type = 'sys_user_type') AS 'position',
			DATE_FORMAT(u.create_date,"%Y-%m-%d %T") AS "createTime",
			(
			CASE
			 WHEN LENGTH(o.parent_ids) = 111 THEN o.name
			 ELSE ''
			END
			) AS shopName,
			(
			CASE
				WHEN LENGTH(o.parent_ids) = 111 THEN (SELECT name FROM sys_office WHERE id = SUBSTRING(o.parent_ids FROM 79 FOR 32))
				WHEN LENGTH(o.parent_ids) = 78 THEN o.name
			  ELSE ''
			END
			) AS market,
			(
			CASE
			  WHEN LENGTH(o.parent_ids) >= 45 THEN  (SELECT name FROM sys_office WHERE id = SUBSTRING(o.parent_ids FROM 13 FOR 32))
				ELSE ''
			END
			) AS area,
			l.lesson_id AS "lessonsId",
			l.name  AS "lessonsName",
			c.name  AS "categorysName",
			DATE_FORMAT(f.createtime,"%Y-%m-%d %T") AS "collectionDate"
		FROM train_lesson_favorites f
		LEFT JOIN train_lessons l ON f.lesson_id = l.lesson_id
		LEFT JOIN train_categorys c ON l.category_id = c.category_id
		LEFT JOIN sys_user u ON u.id = f.user_id
		LEFT JOIN sys_office o ON o.id = u.office_id
		WHERE u.del_flag=0
	</select>
	<!-- 评论统计 -->
	<select id="commentexport" resultType="StatisticsCommentExport">
		SELECT
			u.id AS 'userId',
			u.name AS "userName",
			u.mobile AS "mobile",
			(SELECT label FROM sys_dict WHERE value=u.user_type AND type = 'sys_user_type') AS 'position',
			DATE_FORMAT(u.create_date,"%Y-%m-%d %T") AS "createTime",
			(
			CASE
			 WHEN LENGTH(o.parent_ids) = 111 THEN o.name
			 ELSE ''
			END
			) AS shopName,
			(
			CASE
				WHEN LENGTH(o.parent_ids) = 111 THEN (SELECT name FROM sys_office WHERE id = SUBSTRING(o.parent_ids FROM 79 FOR 32))
				WHEN LENGTH(o.parent_ids) = 78 THEN o.name
			  ELSE ''
			END
			) AS market,
			(
			CASE
			  WHEN LENGTH(o.parent_ids) >= 45 THEN  (SELECT name FROM sys_office WHERE id = SUBSTRING(o.parent_ids FROM 13 FOR 32))
				ELSE ''
			END
			) AS area,
			l.lesson_id AS "lessonsId",
			l.name AS lessonsName,
			c.name AS categorysName,
			co.content,
			DATE_FORMAT(co.createtime,"%Y-%m-%d %T") AS "commentTime",
			co.star
		FROM train_lesson_comments co
		LEFT JOIN train_lessons l ON co.lesson_id = l.lesson_id
		LEFT JOIN train_categorys c ON l.category_id = c.category_id
		LEFT JOIN sys_user u ON u.id = co.user_id
		LEFT JOIN sys_office o ON o.id = u.office_id
		WHERE u.del_flag=0
	</select>
	<!-- 单元测试 -->
	<select id="unitexport" resultType="StatisticsUnitExport">
		SELECT 
			u.id AS 'userId',
			u.name AS "userName",
			u.mobile AS "mobile",
			(SELECT label FROM sys_dict WHERE value=u.user_type AND type = 'sys_user_type') AS 'position',
			DATE_FORMAT(u.create_date,"%Y-%m-%d %T") AS "createTime",
			(
			CASE
			 WHEN LENGTH(o.parent_ids) = 111 THEN o.name
			 ELSE ''
			END
			) AS shopName,
			(
			CASE
				WHEN LENGTH(o.parent_ids) = 111 THEN (SELECT name FROM sys_office WHERE id = SUBSTRING(o.parent_ids FROM 79 FOR 32))
				WHEN LENGTH(o.parent_ids) = 78 THEN o.name
			  ELSE ''
			END
			) AS market,
			(
			CASE
			  WHEN LENGTH(o.parent_ids) >= 45 THEN  (SELECT name FROM sys_office WHERE id = SUBSTRING(o.parent_ids FROM 13 FOR 32))
				ELSE ''
			END
			) AS area,
			c.name AS 'categorysName',
			cum.lesson_score as "lessonScore"
		FROM train_category_user_mapping cum
		LEFT JOIN train_categorys c ON cum.category_id = c.category_id
		LEFT JOIN sys_user u ON u.id = cum.user_id
		LEFT JOIN sys_office o ON o.id = u.office_id
		WHERE u.del_flag=0
	</select>
	<!-- 单元测试统计 -->
	<select id="unitTotalExport" resultType="StatisticsUnitTotalExport">
		SELECT
			c.name 'categorysName',
			count(1) 'adoptNum'
		FROM train_category_user_mapping cum
		LEFT JOIN train_categorys c ON cum.category_id = c.category_id
		GROUP BY cum.category_id,c.name
	</select>
	
</mapper>