<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.training.modules.train.dao.RefundOrderMapper">

	<resultMap type="com.training.modules.train.entity.ArrearageOfficeList" id="ArrearageOfficeList">
		<result column="office_id" property="office_id"/>
		<result column="expense" property="expense"/>
		<result column="income" property="income"/>
		<result column="adds" property="adds"/>
	</resultMap>

	<select id="queryarrearageoffice" parameterType="java.lang.String" resultMap="ArrearageOfficeList">
		SELECT 
			s.office_id,
			<!-- SUM(os.used_limit) AS used_limit -->
			(SELECT IFNULL(SUM(used_limit),0.00) FROM trains.sys_office_statement WHERE office_id = s.office_id AND DATE_FORMAT(create_date,'%Y-%m') = #{formats} AND type = 1) AS expense,
			(SELECT IFNULL(SUM(used_limit),0.00) FROM trains.sys_office_statement WHERE office_id = s.office_id AND DATE_FORMAT(create_date,'%Y-%m') = #{formats} AND type = 0) AS income,
			1 AS adds
		FROM trains.sys_office_account s
		<!-- LEFT JOIN trains.sys_office_statement os ON s.office_id = os.office_id -->
		LEFT JOIN trains.train_refund_order ro ON ro.arrearage_office = s.office_id AND  DATE_FORMAT(ro.add_time,'%Y-%m') = #{format}
		GROUP BY s.office_id HAVING COUNT(ro.order_id) = 0 AND (expense > 0 || income > 0)
	</select>

	<insert id="addrefundOrder" parameterType="java.util.List">
		INSERT INTO trains.train_refund_order
		(
			order_id,
			arrearage_price,
			arrearage_office,
			add_time,
			order_status,
			billmonth,
			closingdate
		)
		VALUES
		<foreach collection="subList" item="item" separator="," >  
	        (
			#{item.order_id},
			${item.used_limit},
			#{item.office_id},
			NOW(),
			1,
			#{item.billmonth},
			DATE_ADD(NOW(), interval 14 DAY)
		)
	    </foreach>
		
	</insert>
	
	<update id="updateOfficeAccount">
		UPDATE 
			trains.sys_office_account oa
		INNER JOIN (SELECT arrearage_office FROM trains.train_refund_order WHERE order_status = 1 AND closingdate <![CDATA[<]]> NOW() GROUP BY arrearage_office) s ON s.arrearage_office = oa.office_id
		SET oa.freeze = 1
		WHERE oa.freeze = 0
	</update>
	
	<update id="updateOrderOverdueStatus">
		UPDATE 
			trains.train_refund_order
		SET is_overdue = '1'
		WHERE closingdate <![CDATA[<]]> NOW()
	</update>
	
	
	<select id="findList" resultType="RefundOrder">
		SELECT 
			ro.order_id as orderId,
			ro.temp_order_id as tempOrderId,
			ro.order_type as orderType,
			ro.arrearage_price as arrearagePrice,
			ro.arrearage_office as arrearageOffice,
			ro.amount as amount,
			DATE_FORMAT(ro.add_time,'%Y-%m-%d %H:%i:%s') as addTime,
			ro.order_status as orderStatus,
			ro.pay_code as payCode,
			DATE_FORMAT(ro.pay_time,'%Y-%m-%d %H:%i:%s') as payTime,
			ro.charge_id as chargeId,
			ro.user_id as userId,
			ro.user_mobile as userMobile,
			ro.user_office_id as userOfficeId,
			ro.channel_flag as channelFlag,
			o.name as arrearageOfficeName,
			u.name as userName,
			f.name as franchiseeName,
			ro.billmonth,
			ro.serialnumber,
			ro.bankaccount,
			ro.openbank,
			ro.openname,
			ro.proof,
			ro.explains,
			ro.remarks
		FROM train_refund_order ro
		left join sys_user u on u.id = ro.user_id
		left join sys_office o on o.id = arrearage_office
		left join sys_franchisee f on f.id = o.franchisee_id
		where 1=1
		<if test="orderId != null and orderId !=''">
			and order_id = #{orderId}
		</if>
		order by ro.add_time desc
	</select>
	
	
	<select id="queryStatementOfRefund" resultType="Statement">
		select 
			state.id as stateId,
			state.order_id as orderId,
			state.office_id as officeId,
			state.used_limit as usedLimit,
			state.`from` as `from`,
			state.type as type,
			DATE_FORMAT(state.create_date,'%Y-%m-%d %H:%i:%s') as createTime
		from sys_office_statement state 
		left join train_statement_order so on so.statement_id = state.id
		where so.order_id = #{orderId}
		
	</select>
	
	<!-- <select id="queryTransferpay" resultType="Transferpay">
		select
			t.id as payId,
			t.serialnumber,
			t.bankaccount,
			t.openbank,
			t.office_id,
			t.order_id,
			t.repaymonth,
			t.user_id,
			t.proof,
			t.`status` as `status`,
			t.`explain` as `explain`,
			t.openname,
			DATE_FORMAT(t.create_time,'%Y-%m-%d %H:%i:%s') as create_time,
			u.name as user_name
		from sys_office_transferpay t
		left join sys_user u on u.id = t.user_id
		where t.order_id = #{order_id}
	</select> -->
	<resultMap type="RefundOrder" id="refundOrderMap">
		<result column="orderId" property="orderId"/>
		<result column="tempOrderId" property="tempOrderId"/>
		<result column="orderType" property="orderType"/>
		<result column="arrearagePrice" property="arrearagePrice"/>
		<result column="amount" property="amount"/>
		<result column="addTime" property="addTime"/>
		<result column="orderStatus" property="orderStatus"/>
		<result column="payCode" property="payCode"/>
		<result column="payTime" property="payTime"/>
		<result column="chargeId" property="chargeId"/>
		<result column="userId" property="userId"/>
		<result column="userMobile" property="userMobile"/>
		<result column="userOfficeId" property="userOfficeId"/>
		<result column="channelFlag" property="channelFlag"/>
		<result column="arrearageOfficeName" property="arrearageOfficeName"/>
		<result column="userName" property="userName"/>
		<result column="franchiseeName" property="franchiseeName"/>
		<result column="billmonth" property="billmonth"/>
		<result column="serialnumber" property="serialnumber"/>
		<result column="bankaccount" property="bankaccount"/>
		<result column="openbank" property="openbank"/>
		<result column="proof" property="proof"/>
		<result column="explains" property="explains"/>
		<result column="openname" property="openname"/>
		<result column="remarks" property="remarks"/>
		<collection property="proofs" column="orderId" select="queryProofs" ofType="ArrayList"></collection>
	</resultMap>
	<select id="queryRefundOrderDetail" resultMap="refundOrderMap">
		select 
			ro.order_id as orderId,
			ro.temp_order_id as tempOrderId,
			ro.order_type as orderType,
			ro.arrearage_price as arrearagePrice,
			ro.arrearage_office as arrearageOffice,
			ro.amount as amount,
			DATE_FORMAT(add_time,'%Y-%m-%d %H:%i:%s') as addTime,
			ro.order_status as orderStatus,
			ro.pay_code as payCode,
			DATE_FORMAT(pay_time,'%Y-%m-%d %H:%i:%s') as payTime,
			ro.charge_id as chargeId,
			ro.user_id as userId,
			ro.user_mobile as userMobile,
			ro.user_office_id as userOfficeId,
			ro.channel_flag as channelFlag,
			ro.billmonth as billmonth,
			ro.serialnumber as serialnumber,
			ro.bankaccount as bankaccount,
			ro.openbank as openbank,
			ro.proof as proof,
			ro.explains as explains,
			ro.openname as openname,
			o.name as arrearageOfficeName,
			u.name as userName,
			f.name as franchiseeName,
			ro.remarks
		from train_refund_order ro
		left join sys_user u on u.id = ro.user_id
		left join sys_office o on o.id = arrearage_office
		left join sys_franchisee f on f.id = o.franchisee_id
		where order_id = #{order_id}
	</select>
	
	<select id="queryProofs" parameterType="String" resultType="String">
		select proof from train_refund_proof where order_id = #{orderId}
	</select>
	
	<update id="makeSureInAccount">
		update train_refund_order
		set order_status = #{status}
		<if test="remarks != null and remarks != ''">
			,remarks=#{remarks}
		</if>
		where order_id = #{order_id}
	</update>
	
	<update id="updateStatementStatus">
		update sys_office_statement a,train_statement_order b 
		set a.refund_order_status = #{status}
		where a.id = b.statement_id and b.order_id = #{order_id}
	</update>
	
	<insert id="insertRefundOrderLog" parameterType="com.training.modules.train.entity.RefundOrderLog">
		insert into train_refund_order_log(
			order_id,
			description,
			create_by,
			create_time
		)
		values(
			#{orderId},
			#{description},
			#{createBy},
			now()
		)
	</insert>
	
	<select id="queryRefundOrderLogList" resultType="com.training.modules.train.entity.RefundOrderLog">
		select
			a.order_id as orderId,
			a.description,
			a.create_by createBy,
			DATE_FORMAT(a.create_time,'%Y-%m-%d %H:%i:%s') as createTime,
			b.name as createUsername
		from train_refund_order_log a
		left join sys_user b on a.create_by = b.id
		where order_id = #{order_id}
	</select>
</mapper>