<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.training.modules.train.dao.RefundOrderMapper">

	<resultMap type="com.training.modules.train.entity.ArrearageOfficeList" id="ArrearageOfficeList">
		<result column="office_id" property="office_id"/>
		<result column="expense" property="expense"/>
		<result column="income" property="income"/>
		<result column="adds" property="adds"/>
	</resultMap>

	<select id="queryarrearageoffice" parameterType="java.lang.String" resultMap="ArrearageOfficeList">
		SELECT 
			s.office_id,
			<!-- SUM(os.used_limit) AS used_limit -->
			(SELECT IFNULL(SUM(used_limit),0.00) FROM trains.sys_office_statement WHERE office_id = s.office_id AND DATE_FORMAT(create_date,'%Y-%m') = #{formats} AND type = 1) AS expense,
			(SELECT IFNULL(SUM(used_limit),0.00) FROM trains.sys_office_statement WHERE office_id = s.office_id AND DATE_FORMAT(create_date,'%Y-%m') = #{formats} AND type = 0) AS income,
			1 AS adds
		FROM trains.sys_office_account s
		<!-- LEFT JOIN trains.sys_office_statement os ON s.office_id = os.office_id -->
		LEFT JOIN trains.train_refund_order ro ON ro.arrearage_office = s.office_id AND  DATE_FORMAT(ro.add_time,'%Y-%m') = #{format}
		GROUP BY s.office_id HAVING COUNT(ro.order_id) = 0 AND (expense > 0 || income > 0)
	</select>

	<insert id="addrefundOrder" parameterType="java.util.List">
		INSERT INTO trains.train_refund_order
		(
			order_id,
			arrearage_price,
			arrearage_office,
			add_time,
			order_status
		)
		VALUES
		<foreach collection="subList" item="item" separator="," >  
	        (
			#{item.order_id},
			${item.used_limit},
			#{item.office_id},
			NOW(),
			1
		)
	    </foreach>
		
	</insert>
	
	<update id="updateOfficeAccount">
		UPDATE 
			trains.sys_office_account oa
		INNER JOIN (SELECT arrearage_office FROM trains.train_refund_order WHERE order_status = 1 AND closingdate <![CDATA[<]]> NOW() GROUP BY arrearage_office) s ON s.arrearage_office = oa.office_id
		SET oa.freeze = 1
		WHERE oa.freeze = 0
	</update>
	
	<update id="updateOrderOverdueStatus">
		<!-- UPDATE 
			trains.train_refund_order
		SET is_overdue = '1'
		WHERE closingdate <![CDATA[<]]> NOW() -->
	</update>
	
	
	<select id="findList" resultType="RefundOrder">
		SELECT 
			ro.order_id as orderId,
			ro.temp_order_id as tempOrderId,
			ro.order_type as orderType,
			ro.arrearage_price as arrearagePrice,
			ro.arrearage_office as arrearageOffice,
			ro.amount as amount,
			DATE_FORMAT(ro.add_time,'%Y-%m-%d %H:%i:%s') as addTime,
			ro.order_status as orderStatus,
			ro.pay_code as payCode,
			DATE_FORMAT(ro.pay_time,'%Y-%m-%d %H:%i:%s') as payTime,
			ro.charge_id as chargeId,
			ro.user_id as userId,
			ro.user_mobile as userMobile,
			ro.user_office_id as userOfficeId,
			ro.channel_flag as channelFlag,
			u.name as userName,
			o.name as arrearageOfficeName,
<!-- 			o.short_name as arrearageOfficeName, -->
			f.name as franchiseeName,
			f.id AS franchiseeId,
<!-- 			f.short_name as franchiseeName, -->
			ro.explains,
			ro.remarks
		FROM train_refund_order ro
		left join sys_office o on o.id = arrearage_office
		left join sys_user u on u.id = ro.user_id
		left join sys_franchisee f on f.id = o.franchisee_id
		where 1=1
		AND ro.order_status !=1
		<if test="orderId != null and orderId !=''">
			and order_id = #{orderId}
		</if>
		<if test="orderStatus != null and orderStatus !=''">
			and ro.order_status = #{orderStatus}
		</if>
		<if test="orderType != null and orderType !=''">
			and ro.order_type = #{orderType}
		</if>
		<if test="arrearageOffice != null and arrearageOffice !=''">
			and ro.arrearage_office = #{arrearageOffice}
		</if>
		<if test="franchiseeId != null and franchiseeId !=''">
			AND o.franchisee_id = #{franchiseeId}
		</if>
		order by ro.order_status,ro.add_time desc
	</select>
	<select id="findExportList" resultType="RefundOrderExport">
		SELECT 
			ro.order_id as orderId,
			o.name as arrearageOfficeName,
			ro.arrearage_price as arrearagePrice,
			ro.amount as amount,
			CASE ro.order_status 
						WHEN 1 THEN '待支付'
						WHEN 2 THEN '待审核'
						WHEN 3 THEN '已入账'
						WHEN 4 THEN '已驳回'
						ELSE '取消订单' END AS orderStatus,
			u.name AS userName,
			<!-- CASE ro.order_type 
						WHEN 1 THEN '线上支付'
						ELSE '线下支付' END AS orderType, -->
			CASE ro.pay_code 
						WHEN 'wx' THEN '微信'
						WHEN 'alipay' THEN '支付宝'
						ELSE '转账' END AS payCode,
			refs.bankaccount,
			refs.openbank,
			refs.openname,
			group_concat(stat.order_id) AS orderCode,
			oaccount.credit_limit - oaccount.used_limit AS usedLimit,
			
			DATE_FORMAT(ro.add_time,'%Y-%m-%d %H:%i:%s') as addTime,
			ro.explains
		FROM train_refund_order ro
		left join sys_office o on o.id = ro.arrearage_office
		LEFT JOIN sys_user u ON u.id= ro.user_id
		LEFT JOIN train_statement_order sod ON sod.order_id=ro.order_id
		LEFT JOIN sys_office_statement stat ON stat.id= sod.statement_id
		LEFT JOIN train_refund_serialnumber refs ON refs.order_id = ro.order_id
		LEFT JOIN sys_office_account oaccount ON oaccount.office_id = ro.arrearage_office
		where 1=1
			AND ro.order_status !=1
		<if test="orderId != null and orderId !=''">
			and ro.order_id = #{orderId}
		</if>
		<if test="orderStatus != null and orderStatus !=''">
			and ro.order_status = #{orderStatus}
		</if>
		<if test="orderType != null and orderType !=''">
			and ro.order_type = #{orderType}
		</if>
		GROUP BY ro.order_id
		ORDER BY ro.order_id,ro.add_time desc
	</select>
	<select id="findExportList" resultType="RefundOrderExport">
		SELECT 
			ro.order_id as orderId,
			o.name as arrearageOfficeName,
			ro.arrearage_price as arrearagePrice,
			ro.amount as amount,
			CASE ro.order_status 
						WHEN 1 THEN '待支付'
						WHEN 2 THEN '待审核'
						WHEN 3 THEN '已入账'
						WHEN 4 THEN '已取消'
						ELSE '取消订单' END AS orderStatus,
			u.name AS userName,
			<!-- CASE ro.order_type 
						WHEN 1 THEN '线上支付'
						ELSE '线下支付' END AS orderType, -->
			CASE ro.pay_code 
						WHEN 'wx' THEN '微信'
						WHEN 'alipay' THEN '支付宝'
						ELSE '转账' END AS payCode,
			ro.bankaccount,
			ro.openbank,
			ro.openname,
			group_concat(stat.order_id) AS orderCode,
			IFNULL(0, 0) AS usedLimit,
			
			DATE_FORMAT(ro.add_time,'%Y-%m-%d %H:%i:%s') as addTime,
			ro.explains
		FROM train_refund_order ro
		left join sys_office o on o.id = ro.arrearage_office
		LEFT JOIN sys_user u ON u.id= ro.user_id
		LEFT JOIN train_statement_order sod ON sod.order_id=ro.order_id
		LEFT JOIN sys_office_statement stat ON stat.id= sod.statement_id
		
		where 1=1
			AND ro.order_status !=1
		<if test="orderId != null and orderId !=''">
			and ro.order_id = #{orderId}
		</if>
		<if test="orderStatus != null and orderStatus !=''">
			and ro.order_status = #{orderStatus}
		</if>
		<if test="orderType != null and orderType !=''">
			and ro.order_type = #{orderType}
		</if>
		<if test="arrearageOffice != null and arrearageOffice !=''">
			and ro.arrearage_office = #{arrearageOffice}
		</if>
		<if test="franchiseeId != null and franchiseeId !=''">
			AND o.franchisee_id = #{franchiseeId}
		</if>
		GROUP BY ro.order_id
		ORDER BY ro.order_id,ro.add_time desc
	</select>
	
	<select id="queryStatementOfRefund" resultType="Statement">
		select 
			state.id as stateId,
			state.order_id as orderId,
			state.office_id as officeId,
			state.used_limit as usedLimit,
			state.`from` as `from`,
			state.type as type,
			DATE_FORMAT(state.create_date,'%Y-%m-%d %H:%i:%s') as createTime
		from sys_office_statement state 
		left join train_statement_order so on so.statement_id = state.id
		where so.order_id = #{orderId}
		
	</select>
	
	
	<resultMap type="RefundOrder" id="refundOrderMap">
		<result column="orderId" property="orderId"/>
		<result column="tempOrderId" property="tempOrderId"/>
		<result column="orderType" property="orderType"/>
		<result column="arrearagePrice" property="arrearagePrice"/>
		<result column="aftersalesPrice" property="aftersalesPrice"/>
		<result column="amount" property="amount"/>
		<result column="addTime" property="addTime"/>
		<result column="orderStatus" property="orderStatus"/>
		<result column="payCode" property="payCode"/>
		<result column="payTime" property="payTime"/>
		<result column="chargeId" property="chargeId"/>
		<result column="userId" property="userId"/>
		<result column="userMobile" property="userMobile"/>
		<result column="userOfficeId" property="userOfficeId"/>
		<result column="channelFlag" property="channelFlag"/>
		<result column="arrearageOfficeName" property="arrearageOfficeName"/>
		<result column="userName" property="userName"/>
		<result column="franchiseeName" property="franchiseeName"/>
		<!-- <result column="billmonth" property="billmonth"/>
		<result column="serialnumber" property="serialnumber"/>
		<result column="bankaccount" property="bankaccount"/>
		<result column="openbank" property="openbank"/>
		<result column="proof" property="proof"/>
		<result column="openname" property="openname"/>-->
		<result column="explains" property="explains"/> 
		<result column="remarks" property="remarks"/>
		<collection property="bankList" column="orderId" select="queryBankList" ofType="ArrayList"></collection>
	</resultMap>
	<select id="queryRefundOrderDetail" resultMap="refundOrderMap">
		select 
			ro.order_id as orderId,
			ro.temp_order_id as tempOrderId,
			ro.order_type as orderType,
			ro.arrearage_price as arrearagePrice,
			ABS(ro.aftersales_price) as aftersalesPrice,
			ro.arrearage_office as arrearageOffice,
			ro.amount as amount,
			DATE_FORMAT(add_time,'%Y-%m-%d %H:%i:%s') as addTime,
			ro.order_status as orderStatus,
			ro.pay_code as payCode,
			DATE_FORMAT(pay_time,'%Y-%m-%d %H:%i:%s') as payTime,
			ro.charge_id as chargeId,
			ro.user_id as userId,
			ro.user_mobile as userMobile,
			ro.user_office_id as userOfficeId,
			ro.channel_flag as channelFlag,
			ro.explains as explains,
			o.name as arrearageOfficeName,
			u.name as userName,
			f.name as franchiseeName,
			ro.remarks
		from train_refund_order ro
		left join sys_user u on u.id = ro.user_id
		left join sys_office o on o.id = arrearage_office
		left join sys_franchisee f on f.id = o.franchisee_id
		where order_id = #{order_id}
	</select>
	
	<select id="queryBankList" parameterType="String" resultType="RefundSerialnumber">
		SELECT * FROM train_refund_serialnumber WHERE order_id = #{orderId}
	</select>
	
	<update id="makeSureInAccount">
		update train_refund_order
		set order_status = #{status}
		<if test="remarks != null and remarks != ''">
			,remarks=#{remarks}
		</if>
		where order_id = #{order_id}
	</update>
	<!-- 将待审核2的状态改已入账3 -->
	<select id="auditAll"  resultType="RefundOrder">
		SELECT 
			ro.order_id as orderId,
			ro.arrearage_office as arrearageOffice,
			ro.amount as amount
		FROM train_refund_order ro
		where ro.order_id in
		<foreach collection="array"  index="index" item="id" open="(" separator="," close=")"  >
       		#{id}
        </foreach>
	</select>
	
	<update id="updateStatementStatus">
		update sys_office_statement a,train_statement_order b 
		set a.refund_order_status = #{status}
		where a.id = b.statement_id and b.order_id = #{order_id}
	</update>
	
	<insert id="insertRefundOrderLog" parameterType="com.training.modules.train.entity.RefundOrderLog">
		insert into train_refund_order_log(
			order_id,
			description,
			create_by,
			create_time
		)
		values(
			#{orderId},
			#{description},
			#{createBy},
			now()
		)
	</insert>
	
	<select id="queryRefundOrderLogList" resultType="com.training.modules.train.entity.RefundOrderLog">
		select
			a.order_id as orderId,
			a.description,
			a.create_by createBy,
			DATE_FORMAT(a.create_time,'%Y-%m-%d %H:%i:%s') as createTime,
			b.name as createUsername
		from train_refund_order_log a
		left join sys_user b on a.create_by = b.id
		where order_id = #{order_id}
	</select>
	<!-- 查凭证 -->
	<select id="findProofList" resultType="String">
		SELECT
			p.proof
		FROM
			train_refund_proof p
		WHERE
			p.serialnumber_id = #{id}
	</select>
	<update id="refundOrderTimeout" parameterType="String">
		UPDATE trains.train_refund_order
		SET order_status = '5'
		WHERE
			order_status = '1'
		AND add_time <![CDATA[<]]> DATE_SUB(NOW(),INTERVAL ${timeout} MINUTE)
	</update>
	<update id="refundOrderTimeoutUpdateOfficeState" parameterType="String">
		UPDATE trains.sys_office_statement os
		INNER JOIN trains.train_statement_order so ON so.statement_id = os.id
		SET os.refund_order_status = '5'
		WHERE
			so.order_id IN (
				SELECT
					order_id
				FROM
					trains.train_refund_order
				WHERE
					order_status = '1'
				AND add_time  <![CDATA[<]]> DATE_SUB(NOW(),INTERVAL ${timeout} MINUTE)
			)
	</update>
</mapper>